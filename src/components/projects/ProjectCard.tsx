
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { ArrowRight, Github, ExternalLink, Image as ImageIcon } from 'lucide-react';
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Link } from 'react-router-dom';
import { useQuery } from 'convex/react';
import { api } from '@/convex/_generated/api';

export interface ProjectProps {
  id: string;
  title: string;
  description: string;
  imageUrl?: string;
  // Direct image URLs
  desktopImageUrl?: string;
  tabletImageUrl?: string;
  mobileImageUrl?: string;
  // Array of additional image URLs
  additionalImages?: string[];
  tags: string[];
  githubUrl?: string;
  liveUrl?: string;
  // Storage IDs
  fileId?: string;
  desktopStorageId?: string;
  tabletStorageId?: string;
  mobileStorageId?: string;
  // Field below is for deserializing the Convex object
  _id?: string;
}

const ProjectCard: React.FC<{ project: ProjectProps; index: number }> = ({ project, index }) => {
  // For debugging
  // console.log('ProjectCard data:', project);
  // Set up state to track image loading status
  const [imageError, setImageError] = useState(false);
  const [isLoaded, setIsLoaded] = useState(false);
  
  // Determine the best image URL to use, following the same pattern as ProjectDetail component
  // The project object already contains the URLs generated by Convex
  const imageUrl = project.desktopImageUrl || project.imageUrl || '';
  
  // Debug information
  if (process.env.NODE_ENV === 'development') {
    console.log(`ProjectCard for ${project.title}:`, { 
      id: project.id,
      hasDesktopUrl: !!project.desktopImageUrl,
      hasImageUrl: !!project.imageUrl,
      usingUrl: imageUrl
    });
  }
  
  // Simple check if we have a URL
  const hasImage = !!imageUrl;
  
  // console.log(`ProjectCard for ${project.title}:`, { imageUrl });
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
      viewport={{ once: true }}
    >
      <Card className="overflow-hidden h-full flex flex-col border border-border/50 hover:border-border/80 transition-all duration-300">
        <CardHeader className="p-0">
          <div className="aspect-video w-full h-[200px] overflow-hidden relative bg-muted/30">
            {/* Debug information in development mode */}
            <div className="absolute top-0 right-0 bg-green-600/90 text-xs text-white p-1 z-10 rounded-bl-md">
              Desktop Preview
            </div>
            
            {/* Only render the image if we have a URL */}
            {hasImage && (
              <img 
                src={imageUrl} 
                alt={`${project.title} preview`}
                className="w-full h-full object-cover object-center transition-all duration-300 hover:scale-105"
                loading="eager"
                onLoad={(e) => {
                  // Mark as loaded
                  setIsLoaded(true);
                  setImageError(false);
                  
                  // Adjust object-fit based on image dimensions (portrait vs landscape)
                  const img = e.target as HTMLImageElement;
                  if (img.naturalHeight > img.naturalWidth * 1.2) {
                    img.className = "w-full h-full object-contain object-center transition-all duration-300 hover:scale-105";
                  }
                  
                  if (process.env.NODE_ENV === 'development') {
                    console.log('Image loaded successfully for', project.title, imageUrl);
                  }
                }}
                onError={() => {
                  console.error('Failed to load image for', project.title, imageUrl);
                  setImageError(true);
                }}
              />
            )}
            
            {/* Fallback if no image or error loading */}
            {(imageError || !hasImage) && (
              <div className="absolute inset-0 flex flex-col items-center justify-center bg-muted" style={{ zIndex: 1 }}>
                <div className="flex flex-col items-center justify-center">
                  <ImageIcon className="w-12 h-12 text-muted-foreground mb-2" />
                  <span className="text-xs text-muted-foreground">{project.title}</span>
                  {process.env.NODE_ENV === 'development' && (
                    <div className="mt-2 text-xs text-red-400">
                      {!imageUrl ? 'No image URL found' : 'Failed to load image'}
                    </div>
                  )}
                </div>
              </div>
            )}
            
            {/* Show badge when project has multiple images */}
            {!imageError && hasImage && project.additionalImages && project.additionalImages.length > 0 && (
              <div className="absolute bottom-2 right-2 bg-black/70 text-white text-xs px-2 py-1 rounded-md backdrop-blur-sm flex items-center gap-1.5">
                <ImageIcon size={12} />
                <span>{project.additionalImages.length + 1}</span>
              </div>
            )}
          </div>
        </CardHeader>
        <CardContent className="p-6 flex-grow">
          <h3 className="text-xl font-bold mb-2">{project.title}</h3>
          <p className="text-muted-foreground mb-4">{project.description}</p>
          <div className="flex flex-wrap gap-2 mb-4">
            {project.tags.map(tag => (
              <Badge key={tag} variant="secondary">{tag}</Badge>
            ))}
          </div>
        </CardContent>
        <CardFooter className="px-6 py-4 border-t border-border/50 bg-secondary/30 flex justify-between">
          <Link to={`/project/${project.id}`}>
            <Button variant="link" className="p-0 h-auto text-primary font-medium">
              View Details <ArrowRight size={16} className="ml-1" />
            </Button>
          </Link>

          <div className="flex gap-2">
            {project.githubUrl && (
              <a href={project.githubUrl.startsWith('http') ? project.githubUrl : `https://${project.githubUrl}`} target="_blank" rel="noopener noreferrer">
                <Button size="sm" variant="ghost">
                  <Github size={16} />
                </Button>
              </a>
            )}
            {project.liveUrl && (
              <a href={project.liveUrl.startsWith('http') ? project.liveUrl : `https://${project.liveUrl}`} target="_blank" rel="noopener noreferrer">
                <Button size="sm" variant="ghost">
                  <ExternalLink size={16} />
                </Button>
              </a>
            )}
          </div>
        </CardFooter>
      </Card>
    </motion.div>
  );
};

export default ProjectCard;
